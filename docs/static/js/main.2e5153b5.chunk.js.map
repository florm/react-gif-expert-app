{"version":3,"sources":["components/CategoryAdd.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["CategoryAdd","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAUzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,GAC1BR,GAAc,SAAAS,GAAG,OAAKP,GAAL,mBAAoBO,OAEzCN,EAAc,KAId,SACG,uBACKO,KAAK,OACLC,MAAST,EACTU,SAjBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BClBlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACJ,mCACTC,EAFa,iDAEmCC,UAAUH,GAF7C,6BACJ,oCADI,SAGKI,MAAMF,GAHX,cAGbG,EAHa,gBAIIA,EAAUC,OAJd,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVtB,kBAgBZM,GAhBY,4CAAH,sDCAPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAGpC,OACI,sBAAKc,UAAU,yCAAf,UACK,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCHLO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAGrB,ECFwB,SAACA,GAEzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAW,WACPxB,EAAQC,GACHwB,MAAK,SAAAd,GACFY,EAAS,CACLf,KAAMG,EACNU,SAAS,SAKtB,CAACpB,IAEGqB,EDjB2BI,CAAazB,GAAjCa,EAAd,EAAQN,KAAca,EAAtB,EAAsBA,QAsBtB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAqDhB,EAArD,OAEEoB,GAAW,mBAAGJ,UAAY,mCAAf,wBACb,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAMJ,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEF1Ce,EApCM,WAEjB,MAAoCxC,mBAAS,CAAC,cAA9C,mBAAOyC,EAAP,KAAmB1C,EAAnB,KAWA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBAEA,6BAOQ0C,EAAWlB,KAAK,SAAAT,GAEZ,OAAO,cAAC,EAAD,CAA4BA,SAAaA,GAAxBA,Y,MCzBhD4B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.2e5153b5.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const CategoryAdd = ({setCategories}) => {\r\n\r\n    //esto me tira un error:\r\n    //Warning: A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, \r\n    //which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component.\r\n    //porque esta pasando de un estado undefined a un estado con valor\r\n    //const [inputValue, setInputValue] = useState();\r\n\r\n    //para evitar esto lo ponemos como un string vacio, para que no\r\n    //sea undefined\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    //con un estado inicializado esto no pasa\r\n    //const [inputValue, setInputValue] = useState('Hola');\r\n    \r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault(); //siempre evitar comportamiento por defecto\r\n        if(inputValue.trim().length > 2){\r\n            setCategories(cat => [inputValue, ...cat]);\r\n        }\r\n        setInputValue('');\r\n    }\r\n\r\n    return (\r\n        <form onSubmit = { handleSubmit }>\r\n           <input\r\n                type=\"text\"\r\n                value = {inputValue}\r\n                onChange = { handleInputChange }\r\n                \r\n           />\r\n        </form>\r\n    )\r\n\r\n    \r\n}\r\n\r\nCategoryAdd.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\n\r\n","\r\n\r\nexport const getGifs = async (category)=>{\r\n    const apiKey = 'gSk5zm0h3WCFoUDtY7AHBZuCOBFLW3N9';\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=${apiKey}`;\r\n    const respuesta = await fetch(url);\r\n    const { data } = await respuesta.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    //recordar que como es async, esta funcion devuelve una promesa que \r\n    //resuelve la coleccion de las imagenes\r\n    return gifs;\r\n\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => { //si lo leo asi parece que cuando llame a <GifGridItem/> lo hice usando 3 atributos distintos, tipo:\r\n    //<GifGridItem id={id} title={title} url={url}/>\r\n    \r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n             <img src={ url } alt={ title }/>\r\n             <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n    \r\n    // const [images, setImages] = useState([]);\r\n    const { data: images, loading } = useFetchGifs(category);\r\n    \r\n    // useEffect(()=>{\r\n\r\n    //     getGifs(category).then(imgs => {\r\n    //         setImages(imgs);\r\n    //     });\r\n    //     //o simplificando\r\n    //     getGifs(category).then(setImages);\r\n\r\n    // }, [category]) //los [] indican que la función se va a ejecutar 1 sola vez\r\n    // //si agrego algo entre los [] indica que cuando lo que este ahi adentro cambie, entonces se vuelve a ejecutar. En este caso ponermos la category para que no de el warning,\r\n    // //porque la categoria no va a cambiar nunca en este caso\r\n\r\n    \r\n    \r\n    //con este metodo aca, cada vez que se renderice el componente se va a ejecutar\r\n    //y por lo tanto se va a llamar a la pai por cada vez. \r\n    //lo comento, y lo uso en un useEffect\r\n    //getGifs();\r\n    \r\n    \r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3> \r\n            \r\n            { loading && <p className = \"animate__animated animate__flash\" >Loading...</p>}\r\n            <div className='card-grid'>\r\n                {\r\n                    images.map( img => {\r\n                        //esta es una forma de mandar la prop img. Cada uno de los atributos se reciben en una única prop en GifGridItem\r\n                        //si en GifGridItem yo quiero desestructurar puedo hacer {prop1, prop2} etc. Pero img corresponderia a prop1.\r\n                            // return <GifGridItem key={img.id} img ={img}/>\r\n                            //Entonces lo que necesito es \r\n                            //desestructurar a su vez img para poder recibir todos ssus componentes (id, title, url) por separado. Uso:\r\n                            return <GifGridItem key={img.id} {...img}/>\r\n                            //Es como si mandara cada una de las propiedad de img como una propiedad independiente. Lo de arriba quedaria como escribir esto:\r\n                            // return <GifGridItem key={img.id} id={img.id} title={img.title} url={img.url}/>\r\n                    })\r\n                }\r\n            \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","//el nombre es un standar. Porque esto es un custom hook\r\n\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) =>{\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( ()=> {\r\n        getGifs(category)\r\n            .then(img =>{\r\n                setState({\r\n                    data: img,\r\n                    loading: false\r\n                    }\r\n                )\r\n            });\r\n\r\n    }, [category]);\r\n\r\n    return state;\r\n}","import { useState } from \"react\";\r\nimport { CategoryAdd } from \"./components/CategoryAdd\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    const handleAdd = ()=>{\r\n        //este de aca lo comento porque ya tengo esa funcionalidad\r\n        //en el nuevo componente CategoryAdd\r\n        //setCategories([...categories, 'Hunter']);\r\n        \r\n        //otra frma. El set recibe como primer argunmento el valor del estado anterio\r\n        //setCategories((cat) => [...cat, 'Hunter']);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <CategoryAdd setCategories = { setCategories }/>\r\n            <hr/>\r\n            {/* <button onClick= { handleAdd }>Agregar</button> */}\r\n            <ol>\r\n                {\r\n                    // categories.map( category => {\r\n                    //     //el key NUNCA puede ser el indice\r\n                    //     return <li key={category}>{category}</li>\r\n                    // })\r\n                    //para otra clase\r\n                    categories.map( category => {\r\n                        //el key NUNCA puede ser el indice\r\n                        return <GifGrid key = { category } category = { category }/>\r\n                    })\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}